import enum
import json


class Indent(enum.Enum):
    TWO_SPACES = '  '
    FOUR_SPACES = '    '
    TAB = '\t'


class Element:
    self_closing = False

    @property
    def tag(self):
        raise RuntimeError("Element requires tag property to render.")

    def __init__(self, *args, **kwargs):
        if self.self_closing and len(args):
            raise RuntimeError('Self closing elements cannot have inner elements.')

        self.inner_elements = args
        self.props = {}
        for k, v in kwargs.items():
            if k.startswith('_'):
                k = k[1:]
            k = k.replace('_', '-')
            self.props[k] = v

    def __call__(self, indent_level=0, indent=Indent.TWO_SPACES):
        # props
        props = [f'{k}="{v}"' for k, v in self.props.items() if v is not None]
        prop_space = ' ' if len(props) else ''

        # indent
        indent_chars = '\n' + ''.join([indent.value for n in range(indent_level)])
        end_tag_indent = indent_chars if any(
            [True for el in self.inner_elements if isinstance(el, Element)]
        ) else ''

        # elements
        els = []
        for a in self.inner_elements:
            if isinstance(a, Element):
                els.append(a(indent_level=indent_level + 1, indent=indent))
            else:
                els.append(str(a))

        if self.self_closing:
            return f'{indent_chars}<{self.tag}{prop_space}{" ".join(props)} />'
        return f'{indent_chars}<{self.tag}{prop_space}{" ".join(props)}' + \
            '>{"".join(els)}{end_tag_indent}</{self.tag}>'

    def __str__(self):
        return self()


class SelfClosingElement(Element):
    self_closing = True

    def __init__(self, **kwargs):
        super().__init__(**kwargs)


class Doc:
    def __init__(self, *args, indent=Indent.TWO_SPACES):
        self.indent = indent
        self.elements = args

    def __call__(self):
        doc = '<!DOCTYPE html>'
        for el in self.elements:
            if isinstance(el, Element):
                doc += el(indent=self.indent)
            else:
                doc += str(el)
        return doc

    def __str__(self):
        return self()

# Below code is autogenerated by rendering the tmplt.element.py.j2 file

{% for tag, data in tags.items() %}
class {{ tag.capitalize() }}({% if not data.self_closing %}Element{% else %}SelfClosingElement{% endif %}):
    tag = '{{ tag }}'
{% if data.attrs|length > 0 %}
    def __init__(
        self,{% if not data.self_closing %}
        *args,{% endif %}{% for attr in data.attrs %}
        {{ attr }}=None,{% endfor %}
        **kwargs
    ):
        props = {
{% for attr in data.attrs %}            "{{ attr }}": {{ attr }},
{% endfor %}        }
        super().__init__({% if not data.self_closing %}*args, {% endif %}**{**props, **kwargs})
{% endif %}
{% endfor %}